-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity peakdetection is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    signal1 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal2 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal3 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal4 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal5 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal6 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal7 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal8 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal9 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal10 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal11 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal12 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal13 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal14 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal15 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal16 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal17 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal18 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal19 : IN STD_LOGIC_VECTOR (15 downto 0);
    signal20 : IN STD_LOGIC_VECTOR (15 downto 0);
    length_r : IN STD_LOGIC_VECTOR (15 downto 0);
    threshold : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of peakdetection is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "peakdetection,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s100-fgga676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.040000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=292,HLS_SYN_LUT=747,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln8_fu_575_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln12_fu_595_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln12_reg_786 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln8_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln12_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_620_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_799 : STD_LOGIC_VECTOR (15 downto 0);
    signal signal_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal signal_load_reg_812 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln13_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_695_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_837 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal mul_ln30_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln30_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_746_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal signal_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal signal_ce0 : STD_LOGIC;
    signal signal_we0 : STD_LOGIC;
    signal signal_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal signal_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal signal_ce1 : STD_LOGIC;
    signal signal_we1 : STD_LOGIC;
    signal signal_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal signal_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rPeaks_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rPeaks_ce0 : STD_LOGIC;
    signal rPeaks_we0 : STD_LOGIC;
    signal rPeaks_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal rPeaks_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln8_reg_515 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_526 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal output_0_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_0_reg_550 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_0_reg_561 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln8_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_1_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_2_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln14_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln30_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal numOfPeaks_1_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal numOfPeaks_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln12_fu_592_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln12_1_fu_606_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln13_fu_643_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln13_1_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln15_fu_669_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal numOfPeaks_fu_674_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_fu_685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln32_fu_712_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln32_1_fu_724_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln32_2_fu_736_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_716_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln32_1_fu_728_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_1_fu_740_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln30_1_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component peakdetection_sigbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component peakdetection_rPecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    signal_U : component peakdetection_sigbkb
    generic map (
        DataWidth => 16,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => signal_address0,
        ce0 => signal_ce0,
        we0 => signal_we0,
        d0 => signal_d0,
        q0 => signal_q0,
        address1 => signal_address1,
        ce1 => signal_ce1,
        we1 => signal_we1,
        d1 => signal_d1,
        q1 => signal_q1);

    rPeaks_U : component peakdetection_rPecud
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rPeaks_address0,
        ce0 => rPeaks_ce0,
        we0 => rPeaks_we0,
        d0 => rPeaks_d0,
        q0 => rPeaks_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_610_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln23_fu_631_p2 = ap_const_lv1_0))) then 
                i1_0_reg_550 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i1_0_reg_550 <= i_1_reg_837;
            end if; 
        end if;
    end process;

    i_0_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_reg_526 <= i_reg_799;
            elsif (((icmp_ln8_fu_586_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_0_reg_526 <= ap_const_lv16_1;
            end if; 
        end if;
    end process;

    numOfPeaks_1_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln14_fu_664_p2) and (icmp_ln13_reg_817 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                numOfPeaks_1_fu_140 <= numOfPeaks_fu_674_p2;
            elsif (((icmp_ln8_fu_586_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                numOfPeaks_1_fu_140 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    output_0_reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_610_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln23_fu_631_p2 = ap_const_lv1_0))) then 
                output_0_reg_539 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                output_0_reg_539 <= output_fu_756_p2;
            end if; 
        end if;
    end process;

    p_0_reg_561_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_610_p2 = ap_const_lv1_0) and (icmp_ln23_fu_631_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                p_0_reg_561 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln29_fu_689_p2 = ap_const_lv1_0))) then 
                p_0_reg_561 <= add_ln34_fu_746_p2;
            end if; 
        end if;
    end process;

    phi_ln8_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_586_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                phi_ln8_reg_515 <= add_ln8_fu_575_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_ln8_reg_515 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_586_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln12_reg_786 <= add_ln12_fu_595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_1_reg_837 <= i_1_fu_695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_610_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                i_reg_799 <= i_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln13_reg_817 <= icmp_ln13_fu_637_p2;
                signal_load_reg_812 <= signal_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                icmp_ln14_reg_826 <= icmp_ln14_fu_654_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_689_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    mul_ln30_reg_842(31 downto 2) <= mul_ln30_fu_701_p2(31 downto 2);
            end if;
        end if;
    end process;
    mul_ln30_reg_842(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln8_fu_586_p2, ap_CS_fsm_state12, icmp_ln12_fu_610_p2, ap_CS_fsm_state15, icmp_ln29_fu_689_p2, icmp_ln23_fu_631_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln8_fu_586_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln12_fu_610_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln23_fu_631_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((icmp_ln12_fu_610_p2 = ap_const_lv1_0) and (icmp_ln23_fu_631_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln29_fu_689_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln12_fu_595_p2 <= std_logic_vector(unsigned(zext_ln12_fu_592_p1) + unsigned(ap_const_lv17_1FFFF));
    add_ln13_fu_643_p2 <= std_logic_vector(unsigned(i_0_reg_526) + unsigned(ap_const_lv16_FFFF));
    add_ln34_1_fu_740_p2 <= std_logic_vector(unsigned(trunc_ln32_2_fu_736_p1) + unsigned(shl_ln_fu_716_p3));
    add_ln34_fu_746_p2 <= std_logic_vector(unsigned(shl_ln32_1_fu_728_p3) + unsigned(add_ln34_1_fu_740_p2));
    add_ln8_fu_575_p2 <= std_logic_vector(unsigned(phi_ln8_reg_515) + unsigned(ap_const_lv4_1));
    and_ln14_fu_664_p2 <= (icmp_ln14_reg_826 and icmp_ln13_1_fu_659_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_0_reg_561;
    i_1_fu_695_p2 <= std_logic_vector(unsigned(i1_0_reg_550) + unsigned(ap_const_lv31_1));
    i_fu_620_p2 <= std_logic_vector(unsigned(i_0_reg_526) + unsigned(ap_const_lv16_1));
    icmp_ln12_fu_610_p2 <= "1" when (signed(zext_ln12_1_fu_606_p1) < signed(add_ln12_reg_786)) else "0";
    icmp_ln13_1_fu_659_p2 <= "1" when (unsigned(signal_load_reg_812) > unsigned(signal_q0)) else "0";
    icmp_ln13_fu_637_p2 <= "1" when (unsigned(signal_q0) > unsigned(signal_q1)) else "0";
    icmp_ln14_fu_654_p2 <= "1" when (unsigned(signal_q0) > unsigned(threshold)) else "0";
    icmp_ln23_fu_631_p2 <= "1" when (numOfPeaks_1_fu_140 = ap_const_lv32_0) else "0";
    icmp_ln29_fu_689_p2 <= "1" when (signed(zext_ln29_fu_685_p1) < signed(numOfPeaks_1_fu_140)) else "0";
    icmp_ln8_fu_586_p2 <= "1" when (phi_ln8_reg_515 = ap_const_lv4_9) else "0";
    mul_ln30_fu_701_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(output_0_reg_539) * signed('0' &ap_const_lv32_64))), 32));
    numOfPeaks_fu_674_p0 <= numOfPeaks_1_fu_140;
    numOfPeaks_fu_674_p2 <= std_logic_vector(signed(numOfPeaks_fu_674_p0) + signed(ap_const_lv32_1));
    output_fu_756_p2 <= std_logic_vector(unsigned(zext_ln30_1_fu_752_p1) + unsigned(mul_ln30_reg_842));

    rPeaks_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state14, zext_ln8_fu_581_p1, sext_ln15_fu_669_p1, zext_ln30_fu_707_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            rPeaks_address0 <= zext_ln30_fu_707_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            rPeaks_address0 <= sext_ln15_fu_669_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            rPeaks_address0 <= zext_ln8_fu_581_p1(4 - 1 downto 0);
        else 
            rPeaks_address0 <= "XXXX";
        end if; 
    end process;


    rPeaks_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            rPeaks_ce0 <= ap_const_logic_1;
        else 
            rPeaks_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rPeaks_d0_assign_proc : process(ap_CS_fsm_state11, i_0_reg_526, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            rPeaks_d0 <= i_0_reg_526;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            rPeaks_d0 <= ap_const_lv16_0;
        else 
            rPeaks_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rPeaks_we0_assign_proc : process(ap_CS_fsm_state11, icmp_ln13_reg_817, ap_CS_fsm_state14, and_ln14_fu_664_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv1_1 = and_ln14_fu_664_p2) and (icmp_ln13_reg_817 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            rPeaks_we0 <= ap_const_logic_1;
        else 
            rPeaks_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln15_fu_669_p0 <= numOfPeaks_1_fu_140;
        sext_ln15_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln15_fu_669_p0),64));

    shl_ln32_1_fu_728_p3 <= (trunc_ln32_1_fu_724_p1 & ap_const_lv1_0);
    shl_ln_fu_716_p3 <= (trunc_ln32_fu_712_p1 & ap_const_lv3_0);

    signal_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln13_fu_615_p1, zext_ln13_2_fu_649_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            signal_address0 <= zext_ln13_2_fu_649_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            signal_address0 <= zext_ln13_fu_615_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            signal_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            signal_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            signal_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signal_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            signal_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signal_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signal_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            signal_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            signal_address0 <= "XXXXX";
        end if; 
    end process;


    signal_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln13_1_fu_626_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            signal_address1 <= zext_ln13_1_fu_626_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            signal_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            signal_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            signal_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signal_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            signal_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signal_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signal_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            signal_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            signal_address1 <= "XXXXX";
        end if; 
    end process;


    signal_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            signal_ce0 <= ap_const_logic_1;
        else 
            signal_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    signal_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            signal_ce1 <= ap_const_logic_1;
        else 
            signal_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    signal_d0_assign_proc : process(ap_CS_fsm_state1, signal1, signal3, signal5, signal7, signal9, signal11, signal13, signal15, signal17, signal19, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            signal_d0 <= signal19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            signal_d0 <= signal17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            signal_d0 <= signal15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signal_d0 <= signal13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            signal_d0 <= signal11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signal_d0 <= signal9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_d0 <= signal7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_d0 <= signal5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signal_d0 <= signal3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            signal_d0 <= signal1;
        else 
            signal_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    signal_d1_assign_proc : process(ap_CS_fsm_state1, signal2, signal4, signal6, signal8, signal10, signal12, signal14, signal16, signal18, signal20, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            signal_d1 <= signal20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            signal_d1 <= signal18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            signal_d1 <= signal16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signal_d1 <= signal14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            signal_d1 <= signal12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signal_d1 <= signal10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            signal_d1 <= signal8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signal_d1 <= signal6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signal_d1 <= signal4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            signal_d1 <= signal2;
        else 
            signal_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    signal_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            signal_we0 <= ap_const_logic_1;
        else 
            signal_we0 <= ap_const_logic_0;
        end if; 
    end process;


    signal_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            signal_we1 <= ap_const_logic_1;
        else 
            signal_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln32_1_fu_724_p1 <= output_0_reg_539(15 - 1 downto 0);
    trunc_ln32_2_fu_736_p1 <= numOfPeaks_1_fu_140(16 - 1 downto 0);
    trunc_ln32_fu_712_p1 <= output_0_reg_539(13 - 1 downto 0);
    zext_ln12_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_526),17));
    zext_ln12_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_r),17));
    zext_ln13_1_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_620_p2),64));
    zext_ln13_2_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_643_p2),64));
    zext_ln13_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_526),64));
    zext_ln29_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_550),32));
    zext_ln30_1_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rPeaks_q0),32));
    zext_ln30_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_550),64));
    zext_ln8_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln8_reg_515),64));
end behav;
