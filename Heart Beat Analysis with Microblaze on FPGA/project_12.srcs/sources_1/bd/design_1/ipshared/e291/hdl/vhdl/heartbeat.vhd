-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity heartbeat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (15 downto 0);
    fs : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of heartbeat is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "heartbeat,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s100-fgga676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.543000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1920,HLS_SYN_LUT=3120,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_42700000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010011100000000000000000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv16_A : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv13_64 : STD_LOGIC_VECTOR (12 downto 0) := "0000001100100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv34_1999A : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000011001100110011010";
    constant ap_const_lv28_28F6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010100011110110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal trunc_ln8_reg_506 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal trunc_ln6_fu_220_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln6_reg_516 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln6_1_fu_224_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln6_1_reg_521 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln10_fu_228_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln10_reg_526 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln9_fu_234_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln9_reg_532 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_fu_243_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_540 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln11_fu_268_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln11_reg_545 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln9_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln10_fu_272_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln10_reg_550 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal icmp_ln16_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_310_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_568 : STD_LOGIC_VECTOR (3 downto 0);
    signal beatIntervalSum_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal rPeaks_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rPeaks_ce0 : STD_LOGIC;
    signal rPeaks_we0 : STD_LOGIC;
    signal rPeaks_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rPeaks_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rPeaks_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal rPeaks_ce1 : STD_LOGIC;
    signal rPeaks_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_132 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal p_0_reg_143 : STD_LOGIC_VECTOR (12 downto 0);
    signal beatIntervalSum_0_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln10_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_1_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln8_fu_487_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_249_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln11_fu_494_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_4_fu_259_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln16_fu_285_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln17_fu_299_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln17_2_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_1_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln17_3_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal p_Val2_s_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_365_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_369_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_355_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_383_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_387_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_401_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_407_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_411_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_423_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_379_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_427_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_431_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_8_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_437_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln59_fu_451_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_455_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1312_fu_465_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_347_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln59_fu_473_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln8_fu_487_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln8_fu_487_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln11_fu_494_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln11_fu_494_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_201_ap_start : STD_LOGIC;
    signal grp_fu_201_ap_done : STD_LOGIC;
    signal grp_fu_249_ap_start : STD_LOGIC;
    signal grp_fu_249_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);
    signal mul_ln11_fu_494_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln8_fu_487_p10 : STD_LOGIC_VECTOR (33 downto 0);

    component heartbeat_fmul_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component heartbeat_fdiv_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component heartbeat_uitofp_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component heartbeat_sitofp_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component heartbeat_sitofp_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component heartbeat_urem_16g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component heartbeat_urem_13hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component heartbeat_mul_mulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component heartbeat_mul_muljbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component heartbeat_rPeaks IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    rPeaks_U : component heartbeat_rPeaks
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rPeaks_address0,
        ce0 => rPeaks_ce0,
        we0 => rPeaks_we0,
        d0 => rPeaks_d0,
        q0 => rPeaks_q0,
        address1 => rPeaks_address1,
        ce1 => rPeaks_ce1,
        q1 => rPeaks_q1);

    heartbeat_fmul_32bkb_U1 : component heartbeat_fmul_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_195,
        din1 => ap_const_lv32_42700000,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    heartbeat_fdiv_32cud_U2 : component heartbeat_fdiv_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_181_p0,
        din1 => grp_fu_181_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    heartbeat_uitofp_dEe_U3 : component heartbeat_uitofp_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_185_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p1);

    heartbeat_sitofp_eOg_U4 : component heartbeat_sitofp_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => beatIntervalSum_0_reg_153,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p1);

    heartbeat_sitofp_fYi_U5 : component heartbeat_sitofp_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_192_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_192_p1);

    heartbeat_urem_16g8j_U6 : component heartbeat_urem_16g8j
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_201_ap_start,
        done => grp_fu_201_ap_done,
        din0 => input_r,
        din1 => grp_fu_201_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p2);

    heartbeat_urem_13hbi_U7 : component heartbeat_urem_13hbi
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 13,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_249_ap_start,
        done => grp_fu_249_ap_done,
        din0 => p_0_reg_143,
        din1 => grp_fu_249_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    heartbeat_mul_mulibs_U8 : component heartbeat_mul_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln8_fu_487_p0,
        din1 => mul_ln8_fu_487_p1,
        dout => mul_ln8_fu_487_p2);

    heartbeat_mul_muljbC_U9 : component heartbeat_mul_muljbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln11_fu_494_p0,
        din1 => mul_ln11_fu_494_p1,
        dout => mul_ln11_fu_494_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    beatIntervalSum_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_fu_238_p2 = ap_const_lv1_1))) then 
                beatIntervalSum_0_reg_153 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                beatIntervalSum_0_reg_153 <= beatIntervalSum_fu_334_p2;
            end if; 
        end if;
    end process;

    i1_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_fu_238_p2 = ap_const_lv1_1))) then 
                i1_0_reg_165 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i1_0_reg_165 <= i_1_reg_568;
            end if; 
        end if;
    end process;

    i_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                i_0_reg_132 <= i_reg_540;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_0_reg_132 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                p_0_reg_143 <= sext_ln11_reg_545;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                p_0_reg_143 <= trunc_ln8_reg_506;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln10_reg_526 <= add_ln10_fu_228_p2;
                trunc_ln6_1_reg_521 <= trunc_ln6_1_fu_224_p1;
                trunc_ln6_reg_516 <= trunc_ln6_fu_220_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln16_fu_289_p2 = ap_const_lv1_1))) then
                i_1_reg_568 <= i_1_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_reg_540 <= i_fu_243_p2;
                    zext_ln9_reg_532(3 downto 0) <= zext_ln9_fu_234_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state66))) then
                reg_195 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_fu_238_p2 = ap_const_lv1_0))) then
                sext_ln11_reg_545 <= sext_ln11_fu_268_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                sub_ln10_reg_550 <= sub_ln10_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                tmp_1_reg_588 <= grp_fu_192_p1;
                tmp_reg_583 <= grp_fu_188_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                tmp_2_reg_598 <= grp_fu_185_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln8_reg_506 <= mul_ln8_fu_487_p2(32 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                x_assign_reg_603 <= grp_fu_176_p2;
            end if;
        end if;
    end process;
    zext_ln9_reg_532(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state21, icmp_ln9_fu_238_p2, ap_CS_fsm_state38, icmp_ln16_fu_289_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_fu_238_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln16_fu_289_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln10_fu_228_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(trunc_ln6_fu_220_p1));
    add_ln17_1_fu_328_p2 <= std_logic_vector(unsigned(zext_ln17_2_fu_320_p1) + unsigned(beatIntervalSum_0_reg_153));
    add_ln17_fu_299_p2 <= std_logic_vector(unsigned(i1_0_reg_165) + unsigned(ap_const_lv4_F));
    add_ln339_fu_387_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_383_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);

    ap_done_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        sub_ln59_fu_473_p2 when (p_Result_s_fu_347_p3(0) = '1') else 
        select_ln1312_fu_465_p3;
    beatIntervalSum_fu_334_p2 <= std_logic_vector(unsigned(add_ln17_1_fu_328_p2) - unsigned(zext_ln17_3_fu_324_p1));

    grp_fu_181_p0_assign_proc : process(tmp_reg_583, tmp_2_reg_598, ap_CS_fsm_state43, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_181_p0 <= tmp_2_reg_598;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_181_p0 <= tmp_reg_583;
        else 
            grp_fu_181_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_181_p1_assign_proc : process(reg_195, tmp_1_reg_588, ap_CS_fsm_state43, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_181_p1 <= reg_195;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_181_p1 <= tmp_1_reg_588;
        else 
            grp_fu_181_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_185_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fs),32));
        grp_fu_192_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln10_reg_526),32));


    grp_fu_201_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_201_ap_start <= ap_const_logic_1;
        else 
            grp_fu_201_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_201_p1 <= ap_const_lv16_A(5 - 1 downto 0);

    grp_fu_249_ap_start_assign_proc : process(ap_CS_fsm_state21, icmp_ln9_fu_238_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln9_fu_238_p2 = ap_const_lv1_0))) then 
            grp_fu_249_ap_start <= ap_const_logic_1;
        else 
            grp_fu_249_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_249_p1 <= ap_const_lv13_64(8 - 1 downto 0);
    i_1_fu_310_p2 <= std_logic_vector(unsigned(i1_0_reg_165) + unsigned(ap_const_lv4_1));
    i_fu_243_p2 <= std_logic_vector(unsigned(i_0_reg_132) + unsigned(ap_const_lv4_1));
    icmp_ln16_fu_289_p2 <= "1" when (unsigned(zext_ln16_fu_285_p1) < unsigned(trunc_ln6_reg_516)) else "0";
    icmp_ln9_fu_238_p2 <= "1" when (i_0_reg_132 = trunc_ln6_1_reg_521) else "0";
    isNeg_fu_393_p3 <= add_ln339_fu_387_p2(8 downto 8);
    mantissa_V_fu_369_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_365_p1) & ap_const_lv1_0);
    mul_ln11_fu_494_p0 <= ap_const_lv28_28F6(15 - 1 downto 0);
    mul_ln11_fu_494_p1 <= mul_ln11_fu_494_p10(13 - 1 downto 0);
    mul_ln11_fu_494_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_reg_143),28));
    mul_ln8_fu_487_p0 <= ap_const_lv34_1999A(18 - 1 downto 0);
    mul_ln8_fu_487_p1 <= mul_ln8_fu_487_p10(16 - 1 downto 0);
    mul_ln8_fu_487_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_r),34));
    p_Result_s_fu_347_p3 <= p_Val2_s_fu_344_p1(31 downto 31);
    p_Val2_s_fu_344_p1 <= x_assign_reg_603;

    rPeaks_address0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state37, sext_ln10_fu_276_p1, zext_ln17_fu_294_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            rPeaks_address0 <= zext_ln17_fu_294_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            rPeaks_address0 <= sext_ln10_fu_276_p1(4 - 1 downto 0);
        else 
            rPeaks_address0 <= "XXXX";
        end if; 
    end process;

    rPeaks_address1 <= zext_ln17_1_fu_305_p1(4 - 1 downto 0);

    rPeaks_ce0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            rPeaks_ce0 <= ap_const_logic_1;
        else 
            rPeaks_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rPeaks_ce1_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            rPeaks_ce1 <= ap_const_logic_1;
        else 
            rPeaks_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rPeaks_d0 <= grp_fu_249_p2(8 - 1 downto 0);

    rPeaks_we0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            rPeaks_we0 <= ap_const_logic_1;
        else 
            rPeaks_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_437_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_379_p1),to_integer(unsigned('0' & zext_ln1287_fu_427_p1(31-1 downto 0)))));
    r_V_fu_431_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_369_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_423_p1(25-1 downto 0)))));
    select_ln1312_fu_465_p3 <= 
        zext_ln59_fu_451_p1 when (isNeg_fu_393_p3(0) = '1') else 
        tmp_5_fu_455_p4;
        sext_ln10_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln10_reg_550),64));

        sext_ln11_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_259_p4),13));

        sext_ln1311_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_411_p3),32));

        sext_ln1311_2_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_411_p3),25));

        sext_ln1311_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_401_p2),9));

    sub_ln10_fu_272_p2 <= std_logic_vector(signed(add_ln10_reg_526) - signed(zext_ln9_reg_532));
    sub_ln1311_fu_401_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_355_p4));
    sub_ln59_fu_473_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(select_ln1312_fu_465_p3));
    tmp_4_fu_259_p4 <= mul_ln11_fu_494_p2(27 downto 20);
    tmp_5_fu_455_p4 <= r_V_1_fu_437_p2(39 downto 24);
    tmp_8_fu_443_p3 <= r_V_fu_431_p2(24 downto 24);
    tmp_V_1_fu_365_p1 <= p_Val2_s_fu_344_p1(23 - 1 downto 0);
    tmp_V_fu_355_p4 <= p_Val2_s_fu_344_p1(30 downto 23);
    trunc_ln6_1_fu_224_p1 <= grp_fu_201_p2(4 - 1 downto 0);
    trunc_ln6_fu_220_p1 <= grp_fu_201_p2(5 - 1 downto 0);
    ush_fu_411_p3 <= 
        sext_ln1311_fu_407_p1 when (isNeg_fu_393_p3(0) = '1') else 
        add_ln339_fu_387_p2;
    zext_ln1287_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_419_p1),79));
    zext_ln16_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_165),5));
    zext_ln17_1_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_fu_299_p2),64));
    zext_ln17_2_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rPeaks_q0),32));
    zext_ln17_3_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rPeaks_q1),32));
    zext_ln17_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_165),64));
    zext_ln339_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_355_p4),9));
    zext_ln59_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_443_p3),16));
    zext_ln682_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_369_p4),79));
    zext_ln9_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_132),5));
end behav;
